from tortoise.models import Model
from tortoise import fields

__all__ = [
    '{model}'
]


class {model}(Model):
    id = fields.BigIntField(pk=True)

    created_at = fields.DatetimeField(auto_now_add=True)
    updated_at = fields.DatetimeField(auto_now=True)
    deleted_at = fields.DatetimeField(null=True)

    class Meta:
        table = '{table_name}'
        unique_together = ()

    def __str__(self) -> str:
        return "{model}"


@pre_save({Model})
async def {model}_pre_save(
    sender: "Type[{Model}]", instance: {Model}, using_db, update_fields
) -> None:
    print(sender, instance, using_db, update_fields)


@post_save({Model})
async def {model}_post_save(
    sender: "Type[{Model}]",
    instance: {Model},
    created: bool,
    using_db: "Optional[BaseDBAsyncClient]",
    update_fields: List[str],
) -> None:
    print(sender, instance, using_db, created, update_fields)


@pre_delete({Model})
async def {model}_pre_delete(
    sender: "Type[{Model}]", instance: {Model}, using_db: "Optional[BaseDBAsyncClient]"
) -> None:
    print(sender, instance, using_db)


@post_delete({Model})
async def {model}_post_delete(
    sender: "Type[{Model}]", instance: {Model}, using_db: "Optional[BaseDBAsyncClient]"
) -> None:
    print(sender, instance, using_db)