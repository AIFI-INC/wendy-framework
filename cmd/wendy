from aerich import Command, DowngradeError
import asyncio
import argparse
import os
import sys
from os import environ as env
sys.path.insert(0, os.path.abspath('.'))
from wendy.utilities import isNonBlankString
from config import TORTOISE_ORM

p = argparse.ArgumentParser(prog="WENDY")
p.add_argument("action", help="The action you want to invoke.", type=str)
p.add_argument("--component", '-c', type=str, help="Name of the target component")
p.add_argument('--repository', '-r', help="Repo name")
args = p.parse_args()

command = Command(
    tortoise_config=TORTOISE_ORM,
    app='models',
    location='databases/migrations'
)

ALLOWED_ACTIONS = [
    'generate',
    'migrate',
    'dbshell',
    'run'
]

ALLOWED_COMPONENTS = [
    'repository'
]

action = args.action


async def migrate():
    await command.init()
    await command.migrate(name="update")

if args.action.lower() not in ALLOWED_ACTIONS:
    raise ValueError(f"action must be one of the following values: [{', '.join(ALLOWED_ACTIONS)}]")

if args.action.lower() == "generate":
    if not isNonBlankString(args.component):
        raise ValueError(f"--component must be set and must be one of the following values: [{', '.join(ALLOWED_COMPONENTS)}]")
    if args.component.lower() == "repository" and isNonBlankString(args.repository):
        f = open(os.path.abspath('templates/databases/reposistory.tmpl'))
        tmpl = f.read()
        f.close()
        repo_name = args.repository_name.lower()
        repo_name_capital = repo_name[0].upper() + repo_name[1:]
        try:
            from wendy.models import *
            eval(repo_name_capital)
        except NameError as ne:
            print(
                f"Class {repo_name_capital} cannot be found. Plz update your entities first!")
            raise
        repo_path = f"wendy/repositories/{repo_name}.py"
        fw = open(repo_path, 'w')
        fw.write(tmpl.format_map(
            {
                'model': repo_name,
                'Model': repo_name_capital
            }
        ))
        fw.close()
        print(f"Repo file for {repo_name_capital} class was generated successfully. You can find the repo file at wendy/repositories/{repo_name}.py")


if args.action.lower() == "migrate":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(asyncio.wait([migrate()]))
    loop.close()
    print("Migrate done")


if args.action.lower() == "dbshell":
    pass
