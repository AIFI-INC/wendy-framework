from aerich import Command, DowngradeError
import asyncio
import argparse
import inflect
import IPython

import os
import sys
from os import environ as env
sys.path.insert(0, os.path.abspath('.'))
from wendy.utilities import isNonBlankString
from config import TORTOISE_ORM, init_db

p = argparse.ArgumentParser(prog="WENDY")
p.add_argument("action", help="The action you want to invoke.", type=str)
p.add_argument("--component", '-c', type=str, help="Name of the target component")
p.add_argument('--repository', '-r', help="Repo name")
p.add_argument('--entity', '-e', help="Name of the entity")
p.add_argument('--not-delete-when-downgrade', action='store_true', help="whether not to delete the migration file when downgrade")
args = p.parse_args()

command = Command(
    tortoise_config=TORTOISE_ORM,
    app='models',
    location='databases/migrations'
)

ALLOWED_ACTIONS = [
    'generate',
    'migrate',
    'migrate:up',
    'migrate:down',
    'dbshell',
    'run'
]

ALLOWED_COMPONENTS = [
    'repository',
    'entity'
]

action = args.action


async def migrate():
    await command.init()
    await command.migrate(name="update")
    
async def up():
    await migrate()
    migrations = await command.upgrade()
    print(f"Applied the following versions: {migrations}")

async def down():
    await command.init()
    versions = os.listdir('databases/migrations/models')
    await command.downgrade(version=len(versions)-1, delete=not args.not_delete_when_downgrade)

if args.action.lower() not in ALLOWED_ACTIONS:
    raise ValueError(f"action must be one of the following values: [{', '.join(ALLOWED_ACTIONS)}]")

if args.action.lower() == "generate":
    if not isNonBlankString(args.component) or args.component not in ALLOWED_COMPONENTS:
        raise ValueError(f"--component must be set and must be one of the following values: [{', '.join(ALLOWED_COMPONENTS)}]")
    if args.component.lower() == "repository" and isNonBlankString(args.repository):
        f = open(os.path.abspath('templates/databases/reposistory.tmpl'))
        tmpl = f.read()
        f.close()
        repo_name = args.repository.lower()
        repo_name_capital = repo_name[0].upper() + repo_name[1:]
        try:
            from wendy.models import *
            eval(repo_name_capital)
        except NameError as ne:
            print(
                f"Class {repo_name_capital} cannot be found. Plz update your entities first!")
            raise
        repo_path = f"wendy/repositories/{repo_name}.py"
        fw = open(repo_path, 'w')
        fw.write(tmpl.format_map(
            {
                'model': repo_name,
                'Model': repo_name_capital
            }
        ))
        fw.close()
        print(f"Repo file for {repo_name_capital} class was generated successfully. You can find the repo file at wendy/repositories/{repo_name}.py")
        print("Patching wendy/repositories/__init__.py ...")
        fw = open("wendy/repositories/__init__.py", "a+")
        fw.write(f"\nfrom .{repo_name} import *\n")
        fw.close()
    elif args.component.lower() == "entity" and isNonBlankString(args.entity):
        f = open(os.path.abspath('templates/databases/model.tmpl'))
        tmpl = f.read()
        f.close()
        entity_name = args.entity.lower()
        entity_name_capital = entity_name[0].upper() + entity_name[1:]
        entity_name_plural = inflect.engine().plural(entity_name)
        entity_path = f"wendy/models/{entity_name}.py"
        fw = open(entity_path, 'w')
        fw.write(tmpl.format_map(
            {
                'model': entity_name_capital,
                'table_name': entity_name_plural
            }
        ))
        fw.close()
        print(f"Entity file for {entity_name_capital} class was generated successfully. You can find the entity file at wendy/models/{entity_name}.py")
        print("Patching wendy/models/__init__.py ...")
        fw = open("wendy/models/__init__.py", "a+")
        fw.write(f"\nfrom .{entity_name} import *\n")
        fw.close()


elif args.action.lower() == "migrate":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(asyncio.wait([migrate()]))
    loop.close()
    print("Migrate done")

elif args.action.lower() == "migrate:up":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(asyncio.wait([up()]))
    loop.close()
    print("Migrate done")

elif args.action.lower() == "migrate:down":
    loop = asyncio.get_event_loop()
    loop.run_until_complete(asyncio.wait([down()]))
    loop.close()
    print("Migrate done")

elif args.action.lower() == "dbshell":
    env['PYTHONPATH'] = os.path.abspath(os.curdir)
    loop = asyncio.get_event_loop()
    loop.run_until_complete(asyncio.wait([init_db()]))
    # loop.close()
    IPython.start_ipython(argv=[])
